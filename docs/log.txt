o  First upgrade existing implementation to have a method that in one optimized
   go, assesses - all chambers will fire but spuriously
    *  What is this logic psuedo code?
    *  Mention bin packing / dynamic programming in notes.
    *  Code as such
    o  Upgrade all tests to suit
        *  List tests required
        o  Add tests from utils upwards
            *  _filter_reserved_chamber_sets(chamber_set_for_P)
            *  _target_set_need_not_be_tested(
            *  _assemble_chamber_sets_to_consider_for(
            *  _all_would_fire(reserved_chamber_set, 
            o  _is_allocation_with_assay_P_added_vulnerable(
                *  design test
                o  test when should be vulnerable
                o  show that is not when tweaked
            o  end to end
                o  Bring back in those relevant of old tests
                o  What learned?
                o  what else at system level?
    o  Make target set size a function of replicas?

o  Test that proves mutex and cover of allocation?
o  Make report for Brad even if can't ship yet.

o  Full result correctness test
o  Calling test / or report
o  What realist targets present set sizes?

o  Regression tests and clean out of redundant code.
o  If works, decide how to update API and get to Brad

o  Merit in seeking more headroom

o  Ditch concept of Assays with replicas?
o  Real hard-coded assay names
o  Calling in clinical terms
o  Impact of failing chamber
o  Password protect

o  Make root url take you form
o  Is all the docker legacy pointless?

----------------------------------------------------------------------------
def _is_allocation_with_assay_P_added_vulnerable(
----------------------------------------------------------------------------

reserve 123 for A
reserve 456 for B

adding C to 367 makes the allocation vulnerable because in the presence
of AB, all of 367 fire despite C not being present

test should ensure that a target set that contains AB is the one that points
this out



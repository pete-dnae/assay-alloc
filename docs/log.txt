*  Come up with definition of starter problem
*  Decide what stack
*  Decide what deployment
*  Think ahead to visualisation
*  Persisted data model
*  Make sure visualisation can be form and url driven
    *  form values
    *  urls
*  Design template model
    *  Complete content
    *  Template hierarchy or inclusion composition (defer)
*  OOD and functional design of python
    *  algorithm
    *  settings oriented
    *  end points and helpers
    *  view centric
o  Dev plan
    *  Bring up flask, hello world in docker scratch mode
        *  Decide if use flask dev server, or cherrypy or gunicorn.
        *  Find reputable looking tutorial and do throwaway try.
            *  https://hub.docker.com/r/tiangolo/uwsgi-nginx-flask/
        *  Follow tutorial and make notes in studies
    *  Migrate to a code in repo
        *  Consider if the demo docker folder system is ok for the project, or
           needs wrapper levels
            *  Can use example project with package structure
        *  Create repo in pete-dnae with readme
        *  Clone to linux space
    *  Put docs alongside
    *  Leave readme behind in old place
    *  Put static where recommended
    *  Mix in this docco folder to the repo
    *  Get running from flask runner
        *  Create venv
        *  TDD up suitable venv and requirements.txt or is it yaml?
            *  try cmd line flask run and see what happens
    *  Mix in token templating to app
    *  Get auto code reload and debug going from dev script
    *  Mix in bootstrap UI viewwise and static serving wise
        *  make sure resources are in app/static so that prodn nginx will
           serve them
           *  test with static_thing.html
        *  but configure flask to auto serve them too during dev
        *  use trivial bootstrap example from tutorial
    *  Re try docker mount experiment post reboot
    *  How about running docker from windows client?
    *  Try recipe here: = successful
    https://rominirani.com/docker-on-windows-mounting-host-directories-d96f3f056a2c
    *  Back to volume style development
        *  Ditch venv
        *  Remove local run dev script
        *  Make sure committed and pushed
        *  clone into c:/shared - maybe shortened name
        *  resume tutorial and note it to get volumes and restart working
        *  when working - ditch assay-alloc from ~/home

    *  Mix in flask-shelve
        *  Remind how to add packages to container
        *  Add flask-shelve to the container
        *  Checkin
        *  Follow flask-shelve tutorial
            *  import it
            *  code the use of it
            *  try it
            *  need debug mode for flask - revert to tutorial
            *  tmp remove call to shelve
        *  Checkin
    *  Get flask to serve /app/static files itself (eg css)
        *  Read about
        *  try
        *  fix failure to find templates
        *  check in
    o  Move rapidly to rough coding of starter models
        *  Decide on top level directory structure for model view etc
        o  Put in headers for a few classes
        o  Rename to make common words at start
        o  Add a few tests
        o  Hypothesise what home handler will look like
        o  Code it in rough style
        o  TDD solver bottom up
        o  Backlog - some classes need equals() implementations.
    o  Start top down serving view - just basics
        o  Template that uses no vars
            o  Choose outer screen template for responsiveness and columns
            *  stick in some approx of header and footer and placholders for
               different pages
            o  replace different pages with includes to isolate
        o  Introduce view model to serve from - initially with hard coded vars
    o  Refine them and get them to work using TDD
    o  Then bring up rest of non persisted view
    o  Add persisted named assay sets
    o  Download popper rather than using cdn

-------------------------------------------------------------------------------
Stack
-------------------------------------------------------------------------------
Requirements

o  Has to be web app from the get go to make it easy for people to engage with
o  Has to be simple and familiar - cannot spend time on this
o  Need persistence
o  Nice if could very simple deploy using docker or app engine
o  Will need to move to enterprise IT eventually

Implications

o  Has to be Python
o  Can be trad server side html templating
o  Rule out server based DB
o  Rule out GAE
o  Can use Flask-Shelve for persistence.

Conclusions

o  Flask should be baseline
o  Find trivial file based key value store (value is entire db in yaml, or
   json)

-------------------------------------------------------------------------------
Deployment
-------------------------------------------------------------------------------
Docker image comprising Flask, Shelve, and Bootstrap with GUnicorn or CherryPy
as WSGI server.
Using mounted volume to allow dev iteration.
Deployed eventually on DNAe server, but in mean time, GCE or EC2 instance, and
even sooner locally.


-------------------------------------------------------------------------------
struct html
-------------------------------------------------------------------------------
    settings page div
